/**
 * @用于处理登陆登出事件的广播与接受
 *
 */
;~function () {

    var app = function () {
        this.callback;
    };
    /**
     * todo : 发送登陆成功广播
     * desc : 发送登陆成功广播,并携带所有的用户信息，和提示
     * @param ret : object [登陆成功后的返回消息内容，包括状态与数据]
     */
    app.prototype.sendLogin = function (ret ) {
        var self = this;
        $.api.sendEvent('login' , ret || {});
        self.success(ret);
    };
    /**
     * todo : 接收登陆成功的广播
     * desc : 接收登陆成功的广播,并且在回调函数中获得所有的数据
     * @param callback
     */
    app.prototype.listenerLogin = function (callback) {
        var self = this;
        if( typeof callback === typeof void 0 && typeof callback == 'function') return $.api.listenerEvent('login' , function (ret) {
            callback(ret);
        });
        $.api.listenerEvent('login' , function (ret) {
            self.callback( null , ret );
        });
        return self;
    };
    /**
     * todo : 发送用户登出事件
     * desc : 发送用户登出事件，发送用户的状态
     * @param ret :object [登陆成出后的返回消息内容，包括状态与数据]
     */
    app.prototype.sendLogout = function (ret) {
        var self = this;
        $.api.sendEvent('login' , ret || {});
        self.success(ret);
    };
    /**
     * todo : then函数
     * desc : 与ajax的then函数用法一致
     * @param callback 回调函数，携带参数
     */

    app.prototype.then = function (callback) {
        var self = this;
        callback = typeof callback == 'function' ? callback : function () {};
        self.callback = callback;
    };
    /**
     * todo : 登陆登出的执行函数
     * desc : 用于操作本地token以及弹出提示
     * @param ret
     */
    app.prototype.success = function (ret) {
        //tips
        $.api.toast(!!ret.msg ? ret.msg : '未知错误');
        //重设token
        localStorage.token = ret.data.token;
        //设置用户的登陆状态
        if(typeof ret.data.is_login === typeof void 0) return localStorage.login = typeof void 0;
        localStorage.login = ret.data.token;
    };
    
    $.logEvent = function () {
        return new app();
    };
}();